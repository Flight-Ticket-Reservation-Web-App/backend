generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model airports {
  city    String
  airport String
  code    String @id(map: "PK_06be6c7681ff18455fd7fd7c45d")
  country String
}

model domestic_flights {
  origin                   String
  destination              String
  flight_no                String
  depart_time              DateTime       @db.Time(6)
  depart_weekday           Int
  duration                 Int
  arrival_time             DateTime       @db.Time(6)
  arrival_weekday          Int
  economy_fare             Decimal        @db.Decimal(10, 2)
  business_fare            Decimal        @db.Decimal(10, 2)
  first_fare               Decimal        @db.Decimal(10, 2)
  economy_seats            Int
  business_seats           Int
  first_seats              Int
  available_economy_seats  Int?
  available_business_seats Int?
  available_first_seats    Int?
  id                       String         @id @default(dbgenerated("nextval('domestic_flights_id_seq'::regclass)"))
  aircode                  String         @db.VarChar(10)
  delay_duration           Int?           @default(0)
  status                   flight_status? @default(ON_TIME)
  airlines                 airlines       @relation(fields: [aircode], references: [aircode], onDelete: NoAction, onUpdate: NoAction, map: "fk_domestic_airline")
}

model international_flights {
  origin                   String
  destination              String
  flight_no                String
  id                       String         @id(map: "PK_e5243c5e47f4a5d34145a59f647") @default(dbgenerated("nextval('international_flights_index_seq'::regclass)"))
  depart_time              DateTime       @db.Time(6)
  depart_weekday           Int
  duration                 Int
  arrival_time             DateTime       @db.Time(6)
  arrival_weekday          Int
  economy_fare             Decimal        @db.Decimal(10, 2)
  business_fare            Decimal        @db.Decimal(10, 2)
  first_fare               Decimal        @db.Decimal(10, 2)
  economy_seats            Int
  business_seats           Int
  first_seats              Int
  available_economy_seats  Int?
  available_business_seats Int?
  available_first_seats    Int?
  aircode                  String         @db.VarChar(10)
  delay_duration           Int?           @default(0)
  status                   flight_status? @default(ON_TIME)
  airlines                 airlines       @relation(fields: [aircode], references: [aircode], onDelete: NoAction, onUpdate: NoAction, map: "fk_international_airline")
}

model user {
  id          Int        @id @default(autoincrement())
  email       String     @unique @db.VarChar
  password    String     @db.VarChar
  firstName   String     @db.VarChar
  lastName    String     @db.VarChar
  codeId      String?    @db.VarChar
  codeExpired String?    @db.VarChar
  role        Role?      @default(USER)
  isActive    Boolean    @default(false)
  bookings    bookings[]
  news        news[]
}

model bookings {
  id                 Int                  @id @default(autoincrement())
  user_id            Int?
  booking_number     String               @unique @db.VarChar
  total_amount       Decimal              @db.Decimal(10, 2)
  trip_type          String               @db.VarChar
  cabin_class        String               @db.VarChar
  status             String               @db.VarChar
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @default(now()) @updatedAt @db.Timestamp(6)
  booking_flights    booking_flights[]
  booking_passengers booking_passengers[]
  user               user?                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tickets            tickets[]
}

model booking_flights {
  id               Int       @id @default(autoincrement())
  booking_id       Int?
  flight_type      String    @db.VarChar
  flight_id        String
  flight_direction String    @db.VarChar
  flight_date      DateTime  @db.Timestamp(6)
  fare_amount      Decimal   @db.Decimal(10, 2)
  booking          bookings? @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([booking_id, flight_direction], map: "unique_booking_flight_direction")
}

model booking_passengers {
  id              Int       @id @default(autoincrement())
  booking_id      Int?
  first_name      String    @db.VarChar
  last_name       String    @db.VarChar
  type            String    @db.VarChar
  gender          String    @db.VarChar
  dob             DateTime  @db.Date
  passport_number String?   @db.VarChar
  passport_expiry DateTime? @db.Date
  nationality     String?   @db.VarChar
  booking         bookings? @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tickets         tickets[]
}

model tickets {
  id            Int                @id @default(autoincrement())
  ticket_number String             @unique @db.VarChar(255)
  booking_id    Int
  passenger_id  Int
  flight_id     String             @db.VarChar(255)
  seat_number   String             @db.VarChar(255)
  gate          String?            @db.VarChar(255)
  barcode       String             @db.VarChar(255)
  status        TicketStatus?      @default(CONFIRMED)
  created_at    DateTime?          @default(now()) @db.Timestamp(6)
  updated_at    DateTime?          @default(now()) @updatedAt @db.Timestamp(6)
  booking       bookings           @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_booking_id")
  passenger     booking_passengers @relation(fields: [passenger_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_passenger_id")

  @@unique([booking_id, passenger_id, flight_id], map: "unique_booking_passenger_flight")
}

model news {
  id         Int          @id @default(autoincrement())
  title      String       @db.VarChar
  content    String
  category   NewsCategory
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  updated_at DateTime?    @default(now()) @db.Timestamp(6)
  admin_id   Int
  thumbnail  String       @db.VarChar
  subtitle   String?      @db.VarChar(255)
  user       user         @relation(fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_admin_id")

  @@index([category], map: "idx_news_category")
}

model airlines {
  aircode               String                  @id @db.VarChar(10)
  airline_name          String                  @db.VarChar(255)
  domestic_flights      domestic_flights[]
  international_flights international_flights[]
}

enum Role {
  USER
  ADMIN
}

enum TicketStatus {
  CONFIRMED
  CANCELLED
}

enum NewsCategory {
  NEWS
  PROMOTION
  ANNOUNCEMENT
}

enum flight_status {
  ON_TIME
  DELAYED
  CANCELLED
  SCHEDULED
}
